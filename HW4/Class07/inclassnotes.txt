[09/25/2017]

Exam 1 is 10/5. STUDY

bash is a process. when you run a command, it checks the exes in certain files to make a child process.
echo $PATH -> displays where bash looks for exes

which COMMAND -> tells you where the exe is
ex: which gcc
ls -l FOLDER -> list folder
ex: ls -l /usr/bin/gcc

==================================================================================

Homework 2

pipeclass07.c or pipe-detect-errors.c example:

-- Be sure to close the unused read/write ends of the pipe

-- This allows the read() system call to return 0 is no data to be read and there
	is no way that any data will become available on the pipe (i.e., no writers exist)

==================================================================================

Process Handling:

Both FCFC and SJF are non-preemptive algorithsm
-- once a process is using the CPU, it will continue to use the CPU
	until that given CPU burst is complete

-- what if we added preemption to SJF -- i.e., when a process arrives,
	it can potentially preempt the currently running process if its CPU burst time
	is less than that of the current running process. This is...

Shortest Remaining Time (SRT)
-- preemptive SJF algorithm
-- when a process arrives, it can preempt the currently running process if 
	the CPU burst time of the arriving process is less than the remaining time
	of the currently running process

	pid 	CPU burst time 		arrival time
	P1			18 ms				0 ms
	P2			3 ms				2 ms
	P3			4 ms				3 ms	
	P4			3 ms				5 ms

		p <== P2 preempted P1 at time 2ms
	  +--+--+--+--+------------+
SRT:  |P1|P2|P4|P3|P1          |
	  +--+--+--+--+------------+
time: 0  2  5  8  12          28

	SRT: P1 has 10 ms wait time
		 P2 has 0 ms wait time
		 P3 has 5 ms wait time
		 P4 has 0 ms wait time

		 P1 has 28 ms turnaround time
		 P2 has 3 ms turnaround time
		 P3 has 9 ms turnaround time
		 P4 has 3 ms turnaround time

Can a proces face starvation in SRT?
-- Yes, a process with a large CPU burst time might never finish its 
	CPU burst if shorter processes keep arriving

============================================================================================

A key problem with SJF/SRT is that we do not know the actual CPU burst times ahead of time
-- We can predict the CPU burst times for each process based on some historical data,
	but that's never 100% correct, and it adds overhead
-- We can use exponential averaging (for EACH process)

	tau -- estimated burst time
	t -- actual burst time
	alpha -- constant in the range [0,1). Often 0.5 or much higher

	tau   = alpha x t + (1-alpha) x tau
	   i+1

	this is how we continually update our guess for a process

-- e.g., with alpha set to 0.5
	
	tau  = 10 <== initial guess -- could be random, could be hardcoded, could be avg of previous
	   0

	t  = 6 <== actual time of process
	 0

	tau  = 0.5 x t  + 0.5 x tau  = 0.5 x 6 + 0.5 x 10 = 8 <== next estimate
	   1          0            0

	t  = 4
	 1

	tau  = 0.5 x t  + 0.5 x tau  = 0.5 x 4 + 0.5 x 8 = 6 <== next estimate
	   2          1            1

TO DO: recalculate using alpha of 0.75, 0.25, 0.9, etc...
		what happens when alpha is 0? or 1?

=============================================================================================

Priority Scheduling

-- Each process is assigned a priority based on:
	-- CPU burst times (e.g., SJF/SRT)
	-- ratio of (predicted/expected) CPU to I/O activity
	-- system resource usage
	-- arbitrary

-- The process with the highest priority gets schedules first

-- When multiple processes have the same priority, we then need to apply
	some secondary algorithm to that subset (e.g., FCFS)

-- We choose whether the algorithm is preemptive or non-preemptive

-- If preemptive, an arriving process, if at a higher priority than the current running
	process, we have a preemption
	-- When a preemption occurs, the current running process is switched out of the CPU and added
		back to the ready queue

-- If higher-priority processes keep arriving, they can cause either starvation or
	indefinite blockign for the lower-priority processes in the ready queue. 

-- To avoid starvation (and reduce indefinite blocking), we can use AGING:
	-- If a given process is in the READY state (in the ready queue) for some X amount of time, then
		we increase the priority of that process by Y.

============================================================================================

ALGORITHM 			PREEMPTION? 			ADVANTAGES(S) 							DISADVANTAGES(S)

 FCFS				no pre 					easy to implement, minimal overhead		long wait times, 
 																					long turnaround times

 SJF				no pre 					optimal (fastest) 						starvation, 
 																					requires CPU burst time
 																				 	predictions

 SRT 				pre 					SAME AS SJF								starvation, 
 																					requires CPU burst time
 																				 	predictions

 Priority 			either 					finer control over process order 		starvation

 Priority 			either 					fine control like priority,				still have long wait times for 
 (with aging) 																					low
 PWA										avoid starvation problem				priority processes
 

 Round Robin		pre 					no starvation, high level of fairness	a lot of overhead for context 
 																					switching,
 RR 				(based on timeslice)											larger average wait times per process
 																					strong dependency on timeslice selection
