[09/14/2017]

Good programming habits
-- Compile using the -Wall and -Werror flags

-- Use the DEBUG_MODE approach in your code 
	(use the -D DEBUG_MODE on the gcc command-lines)

-- Close any and all open files, typically at the earliest 
	possible point in your code

-- Dynamically allocate exactly the memory you need
	(and be sure to add one byte for strings for the '\0' character)

-- Free dynamically allocated memory at the earliest possible point

	...
	free( x );
	x = NULL;

-- Use valgrind to check for memory leaks

-- Check all return values from system calls and library function calls

-- Always guard against buffer overflow

-- If you see an "implicit declaration" warning, you're missing one or more header 
	files, so check out the man page for details

====================================================================

C vs. C++

-- C has no classes
	-- struct is what we use

-- char* (of char[]) instead of the string class

-- new/declare versus malloc()/calloc()/realloc()/fre()

-- pass-by-value and pass-by-reference

	C++:		void funct(int &a, int &b) {a = 5;}
				main() {int x = 4, y = 3; func(x,y);
					cout << x << "and" << y << endl; }

				OUTPUT: 5 and 3 //x and y and statically allocated in main()
								//a and b are pointers back to x and y

	C:			void func(int* a, int* b) {*a = 5; }
				main() {int x = 4, y = 3; func( &x, &y );
					print( "%d and %d\n", x, y ); }

				OUTPUT: 5 and 3 //x and y and statically allocated in main()
								//a and b are pointers back to x and y

				void f(int* x) { *x = 12; }
				main() { int* q = malloc( ... ); f( q ); /* *q == 12 */ }

--realloc could potentially change pointer location, so always return it
q = realloc( q, ... );

====================================================================

Homework 1
-- due 11:59PM Friday 9/15 on Submitty
-- email Goldschimdt if you can't login. (Use with RCS ID)

	char** words; /* words is a pointer to a char* */
			+-----+
	words: 	| ptr |
			+-----+

	/*allocate memory for the words array here... */

			+-----+				+-----+
	words: 	| ptr ======> [0] 	|char*|
			+-----+				+-----+
						  [2]	|char*|
						  		+-----+
						  [3]	|char*|
						  		+-----+
						  [4]	|char*|
						  		+-----+

						  		.......

						  		.......
						  [15]	|char*|
						  		+-----+
	all of these char* are NULL;


	/*encounter first word*/
	calloc( words[0] 
	strcpy( words[0], "Once" )

			+-----+				+-----+			+----------+
	words: 	| ptr ======> [0] 	|char*====> [1]	| "Once\0" | '\0' is end-of-string (EOS)
			+-----+				+-----+			+----------+
						  [2]	|char*|
						  		+-----+
						  [3]	|char*|
						  		+-----+
						  [4]	|char*|
						  		+-----+
						  		.......
						  		.......
						  [15]	|char*|
						  		+-----+

char* s = "ABCD";
words[2] = s; 		/* words[2] now points to s (on the stack) */
s[1] = 'X'; 		/* "AXCD" */

TODO: dynamically allocate the memory for each string
		-- spec says word won't be longer than 80 characters
		-- use this:
				char word[80];
				/*read in next word*/
				..
				words[i] = malloc(length-of-word + 1);
				words[i][length-of-word++] = '\0';
				strcpy(words[i], word);

	: change to calloc()
	: maybe use (pointer == NULL) to sense end
	: FREE -> NO MEMORY LEAKS

=====================================================================
How to go about free:

free(words); /*this alone will give you memory leaks
				(i.e. each individually allocated word) */

/* correct way: */
loop through the words array, freeing up each individual word,
	free( words[i] );
free( words );

free( NULL ); (this is nop)

=====================================================================
for the counts array, you only need an array of ints