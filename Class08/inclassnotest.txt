[09/28/17]

Incoming...

Homework 2

Project 1

Exam 1 -- Sample Exam Question

=============================================================

Homework 2

Recursive?
e.g., "(* 12 (+ 15 8) 19)"
	   ^
	   i

	process_expr( expr, i )
	{
		what is my operator (sub-expression)?
		or just return the value (e.g., 12, 9, 8) <- base case

		loop to identify all operands
		{
			using index i, find the next operand

			fork()
			{
				the child process handles the operand at index i
				process_expr( expr, i );
				exit();
			}
		}

		loop again for each child process in left-to-right order
		{
			read()
			waitpid(), i.e., waiting for termination <-- maybe check for error in children here
		}

		return the product( or sum or etc. )
	}

	/* what's not shown above is sending the results up one level via the appropriate pipe */

	/* also what's not shown above is you need to keep track of the child pids and also the various pipe descriptors */

	For error such a division by zero or not enough operands, send the error to the
	parent (via exit( EXIT_FAILURE )), which the parent then propogates up the tree
	(with subsequent exit( EXIT_FAILURE ) calls)

	(* 56 (/ 33 (-10 10)) 20) <=== really interesting edge case

#if 0
	e.g., "(* 56 (/ 33 0) 10)" ====> (ignoring the bad middle operand)
	e.g., "(* 56 (/33 0)" ====> ERROR: not enough operands; exiting

	For errors such as these, ignore the bad operands at the next level up and try to keep going...
	So now, GO BACK TO OLD CODE
#endif

	HAVE to make parellel. Maybe I can split before making a new function, and then at the bottom of parenFunction, I get response from each one

===================================================================================

To address starvation problems with other algorithms, we have...

Round Robin (RR)

-- FCFS with a time limit on each CPU burst
	-- i.e., a timeslice or time quantum

-- When a process starts using the CPU, a timer is set
	-- The process either finishes its CPU burst before the time expires
		(btw the next process on the ready queue immediately starts using the CPU)
	-- Or the process is PREEMPTED by the expiration of the timer
		(in which the process is added back to the end of the ready queue)

-- Illusion in which all process are "simultaneously" using the CPU

-- Selection of the timeslice is crucial
	-- Too large of a timeslice and we have FCFS again
	-- Too small, and we spend all our time switching, too many context switches
	-- Try to minimize turnaround times if we can get "most" of the processes finishing their
		respective CPU burst times within one time slice
	-- Heuristic is 80% of CPU burst times should be less than or equal to the timeslice

-- With N processes, each process gets (1/N)th of the CPU time -- FAIRNESS

-- If a process arrives at a later time (i.e., not time 0), we always add the process to
	the end of the queue (USE THSI APPROACH ON PROJECT ONE)

-- Alternative approach: add the arriving process to the front of the queue
	instead of the end of the queue

-- Key advantages of RR: eliminate starvation; increase fairness

e.g., apply the RR algorithm to the processes below using a timeslice of 3 ms.

	pid 		CPU burst times 		arrival times
	P1				20 ms 					0
	P2 				5 ms 					0
	P3 				2 ms 					2 ms
	P4 				10 ms 					4 ms

QUEUE: P2 P3 P1

	RR (with timeslice of 3 ms)
	|
 P1 >XXXp    XXXp    XXXp  XXXp  XXXpXXXXX.				<=== 5 preemptions
 P2 >	XXXp       XX.									<=== 1 preemption
 P3 | >    XX.											<=== 0 preemptions
 P4 |   >       XXXp    XXXp  XXXp  X.					<=== 3 preemptions
	+----------------------------------------------------> times
              1111111111222222222233333333334444444444
	01234567890123456789012345678901234567890123456789

	TO DO: calculate turnaround and wait times for each process
	TO DO: repeat the above analysis/simulation using a timeslice of 2ms, 1ms, 6ms, etc.

	turnaround time = CPU burst time + wait time