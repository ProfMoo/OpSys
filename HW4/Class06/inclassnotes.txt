[09/21/2017]

./a.out > output.txt
Puts the output into a file
Good for checking if submitty seems to match, but isn't getting a perfect score.

=================================================================

Homework 2
Before you call fork(), you can set up in local variables whatever data you want to "pass"
to the child process...

	PARENT: char expression: "(+ 5 6 (* -7 8 )"

			i = 3;
			pid = fork()l
			/*copy the entire process memory to the child process*/

			if( pid == 0 )
			{
				/*my operand starts at index i, which is 3 */
				...
				send result 5 on pipe back up to the parent
				exit()
			}

			i = 5;

			pid = fork();
			/*copy the entire process memory to the child process*/

			if (pid == 0)
			{
				/*my operand at index i, which is 5 */
				send result 6
				exit()
			}

			i = 7 /*index of the third operand*/

			if (pid == 0)
			{
				/*my operand starts at index i, which is 7 */
				will create more processes, but then send the result back up once done
				exit()
			}

			//look at example on hw2 PDF for more details

=================================================================

CPU Scheduling (part 2)

WAIT TIME: How much time does a process spend in the ready queue 
		(i.e., waiting for its turn in the CPU)?

TURNAROUND TIME: How much time is required for a process to complete its CPU burst?
				From the time it enters the ready queue through to when it completes
				its CPU burst?

TURNAROUND TIE = WAIT TIME + CPU BURST TIME
 (not included here is overhead, i.e., the context switch times)

//more correct VVV
 TURNAROUND TIE = WAIT TIME + CPU BURST TIME + overhead


 First Come, First Served (FCFC):

 	pid			CPU burst times		(Assumption here is that all processes arrive				
 	P1			18 ms					at time 0)
 	P2			3 ms
 	P3			4 ms

 	context switch     context switches
 	  v                  v    v    v
 	  +------------------+----+----+--------
FCFS: | P1               | P2 | P3 | ..........
	  +------------------+----+----+--------
t:    0                  18   21  25 ====>

P1 has 0 wait time
P2 has 18 ms wait time
P3 has 21 ms wait time

P1 has 18 ms turnaround time
P2 has 21 ms turnaround time
P3 has 25 ms turnaround time

FCFS:
-- advantages: very simple, easy to implement, very low overhead
-- disadvantages: larger processes can cause long delays for shorter processes
		      		(P1 vs P2/P3)


Shortest Job First (SJF):

	pid			CPU burst times		(Assumption here is that all processes arrive				
 	P1			18 ms					at time 0)
 	P2			3 ms
 	P3			4 ms

   context switches				context switch
     v    v    v 				   v
 	  +----------------------------+--------
SJF: | P2 | P3 | P1                | ..........
	  +----------------------------+--------
t:    0   3    7                   25 ===>

	P1 has 7 ms wait time
	P2 has 0 ms wait time
	P3 has 3 ms wait time

	P1 has 25 ms turnaround time
	P2 has 3ms turnaround time
	P3 has 7ms turnaround time

SJF:
-- advantages: lower avg wait/turnaround times versus FCFC
-- disadvantages: process with a large CPU burst time might face STARVATION
				(i.e., the starved process never reaches the front of the queue,
				and therefore, never has time on the CPU)

				process with a large CPU burst time might face INDEFINITE BLOCKING (i.e., takes
				a really loooong time to get to the front of the queue); how is that fair?

				we have no way to know exactly what the CPU burst times will be for each
				process, this is all just prediction

				higher overload versus FCFC (priority queue)

Both FCFC and SJF are non-preemptive algorithsm
-- once a process is using the CPU, it will continue to use the CPU
	until that given CPU burst is complete

-- what if we added preemption to SJF -- i.e., when a process arrives,
	it can potentially preempt the currently running process if its CPU burst time
	is less than that of the current running process. This is...


Shortest Remaining Time (SRT):