[10/23/2017]

Exam 1 Regrade requests due by end of office hours today


================================================================

SEMAPHORE

-- an OS construct that enables us to have synchronized
    access to one or more shared resources

-- special non-negative int variable

-- two operations:

   -- first operation essentially attempts to gain access

      P()       proberen (to try)
      wait()
      down()

   -- second operation relinquishes the access that we gained
       via P() or wait() or down()

      V()       vrygeren (to release)
      signal()
      up()

-- pseudocode:

   semaphore S is non-negative int variable
    (INVARIANT: S >= 0)

   P( semaphore S )     /* this P() operation MUST execute */
   {                    /*  without any interruption, i.e., be atomic */
     while ( S == 0 )
     {
       /* busy wait (until resource becomes available) */
     }
     S--;
   }

   V( semaphore S )
   {
     S++;
   }

   INVARIANT:  S  =  S   +  #V  -  #P
                      0

               #V is the number of V() operations called on S

               #P is the number of completed P() operations on S


-- example of a BINARY SEMAPHORE, which guarantees mutual exclusion

   /* initialize to 1 since there is exactly one resource/lock */
   semaphore mutex = 1;

   /* each process (or thread) executes the code below: */
   ...
   P( mutex );
   executeCriticalSection();
   V( mutex );
   ...


-- a COUNTING (or GENERAL) SEMAPHORE controls access to a finite
    number of resources

   -- initialize semaphore to n, where n is the number of resources
       to be shared/synchronized

   -- use P() and V() operations

   -- possible values of the semaphore are 0, 1, 2, ..., n


-- e.g., Producer/Consumer Problem (a.k.a. Shared Buffer Problem)

   -- Given a shared buffer (i.e., array) of a fixed size
   -- One or more producer threads (or processes)
   -- One or more consumer threads (or processes)


                        /* shared/global memory */
                        count int n = 8;    /* size of shared array */
                        buffer[n];
                        semaphore empty_slots = n;
                        semaphore used_slots = 0;

  /* producer */                           /* consumer */
  while ( 1 )                              while ( 1 )
  {                                        {
    item = produce_next_item();              P( used_slots );
    P( empty_slots );                        item = remove_from_buffer();
    add_to_buffer( item );                   V( empty_slots );
    V( used_slots );                         consume( item );
  }                                        }

  The above solution only works with one producer and one consumer

  The above solution uses two counting semaphores to ensure
  -- no buffer overflow will occur in the producer
  -- no reading from an empty buffer in the consumer

  The above solution will break if we have multiple producers
  -- because the add_to_buffer() operation could have multiple slots
      of the buffer being overwritten by multiple producers

  TO DO: what synchronization problems could occur in the above solution?




  Next version.........


                        /* shared/global memory */
                        count int n = 8;    /* size of shared array */
                        buffer[n];
                        semaphore empty_slots = n;
                        semaphore used_slots = 0;
                        semaphore mutex = 1;

  /* producer */                           /* consumer */
  while ( 1 )                              while ( 1 )
  {                                        {
    item = produce_next_item();              P( used_slots );
    P( empty_slots );                          P( mutex );
      P( mutex );                                item = remove_from_buffer();
        add_to_buffer( item );                 V( mutex );
      V( mutex );                            V( empty_slots );
    V( used_slots );                         consume( item );
  }                                        }

  The above solution works for multiple producers and/or consumers

  .....the above solution uses a mutex to control access
         to the entire buffer

  ...would be better to control access to individual slots within the buffer


  TO DO: parallelize the above solution further such that reads/writes
          can occur simultaneously in different slots of the array




Another example:

The READERS/WRITERS PROBLEM

-- Shared resource is an array (e.g., seating char of a flight or concert)

-- One or more readers can be reading simultaneously

-- One or more writers....
   -- When a writer wishes to write, no other writers can be writing
   -- Also, when a writer wishes to write, no readers can be reading